======================================================================
//main function
#include "Bank.h"
int main()
{
    Bank myBank;
    myBank.readAccts();
    myBank.processTransactions();
    myBank.printAllAccts();
    return 0;
}


=======================Bank cpp ============================
#include "Bank.h"
void Bank::readAccts(){

       int response;

        cout << "Welcome to VR&Co Banking. Enter the Initial Accounts. " << endl;
        cout << "Enter 1 for a new account, 0 to finish: " << endl;
        cin >> response;

       while(response){

           newAcct();
           cout<< "Enter 1 for a new account, 0 to quit: " << endl;
           cin >> response;

       }
   }
   void Bank::newAcct(){

    int an, at;
    double b;
    string fn, ln;
    string ssn;
            cout << "Enter Account Number." << endl;
            cin >> an;

/* Search For Account */
        int pos = find(an);

            if (pos >= 0){

                cout << "Error! Account already exists." << endl;
                return ;

       }

            else{

        /* Call Typemenu() Function */

                cout << "Enter Your First Name." << endl;
                cin >> fn;
                cout << "Enter Your Last Name." << endl;
                cin >> ln;
                cout << "Enter Your SSN." << endl;
                cin >> ssn;
                typemenu();
                cout << "Enter the Account type you want to open." << endl;
                cin >> at;

                cout << "Enter the initial deposit." << endl;
                cout << "$";
                cin >> b;


             /* Dynamically Allocate new Accounts */
           acct [numaccts++] = new Account (an,at,b,fn,ln,ssn);

       }
   }

======================= Account.h===========================================

//Account.h

#include "Transactions.h"
#include "Depositor.h"
#include <iostream>

class Account{

    private:

        int acctnum;
        int ntrans;
        double bal;
        Transaction * tr;                                                  // dynamic allocation of Transaction class
        int status;
        int acctype;
        Depositor dep;

     public:

/* Account Constructor: initialize all Account variables */
Account (int an,int at,double b, string fn, string ln, string ssn){                                              // an = a number

            string kind[3] = {"Checking ", "Savings ", "Money Market "};
            acctnum = an;
            bal = b;
            ntrans = 0;
            tr = new Transaction [10];                                                  // set up new array of transaction
            tr[ntrans].setTrans(0, bal);
            status = 1;
            acctype = at-1;
            dep.setSsn(ssn);
            dep.setName(fn,ln);
            cout << "Congratulations  " << dep.getName() << endl;
            cout << "You have opened a new " << kind[at-1] << "account" << endl;
            cout << "Initial balance: $" << b << endl;
            ntrans++;

        }

/* Destructor for the Account Constructor */
~Account(){

        delete[] tr;
     }

/* Mutator Function for retrieving private member variable status */
int getStatus(){

         return status;
     }
string getName()
{
    return dep.getName();
}
string getSsn()
{
    return dep.getSsn();
}
/* Mutator Function for retrieving private member variable type */
int getType(){

         return acctype;
     }

/* Mutator Function for retrieving private member variable acctnum */
int getAcctnum(){

         return acctnum;
     }

/* Account: Deposit Function */
void deposit(){

    double amt;

         cout << "How much do you want to deposit" << endl;
         cin >> amt;

         bal += amt;
         tr[ntrans++].setTrans(1,amt);

         cout << "You have deposited " << amt << " and now have a balance of $" << bal << endl;

     }

/* Account: Withdrawal Function */
void withdrawal(){

    double amt;

         cout << "How much do you want to withdraw?" << endl;
         cin >> amt;

         if (amt <= bal)
         {
             bal -= amt;
             tr[ntrans++].setTrans(2,amt);
             cout << "You have withdrawn " << amt << " and now have a balance of $" << bal << endl;
         }

         else
         cout << "Error: Insufficient Funds." << endl;

     }

/* Account: Close Account Function */
void closeAcct(){

         status = 0;
         cout << dep.getName()<<endl;
         cout << "Your Account is now closed. "<< dep.getName()<<endl;
         cout << "Here are your funds of " << bal <<endl;

         tr[ntrans++].setTrans(3,bal);
         bal = 0;

     }

/* Account: Inquiry Function */
void inquiry(){
         cout << dep.getName()<<endl;
         cout << "Your current balance is $" << bal <<endl;

         prtTrans();

     }

/* Account: Print Transaction */
void prtTrans(){

         cout << "Here are your transactions: " << endl;

         for (int i = 0; i < ntrans; i++){

             cout<< i+1 <<": ";
             tr[i].prt();
         }
     }


/* Account: Re-open */
void reopen(){

         status = 1 ;

         tr[ntrans++].setTrans(4,bal);

         cout << "Your Accountt is now reopened." << endl;
     }
 };
========================== Bank.h======================================

//Bank.h
#include "Account.h"
#include <iostream>
int const MAX_NUM=100;
class Bank{

    private:

       Account * acct[MAX_NUM];
       int numaccts;
       int nopen, nclosed;
    public:

/* Bank Constructor: initialize all Bank variables */
Bank(){

           nopen = nclosed = numaccts = 0;

       }

/* Destructor for the Bank Constructor */
~Bank(){

           for(int i = 0; i < numaccts; i++){
              delete acct[i];
           }

       }

/* Bank: Read Accounts Function */
void readAccts();
/*located in bank cpp */
/* Bank: Find Account Function */
int find(int an){

       for (int i = 0; i < numaccts; i++)
           if (acct[i]->getAcctnum() == an)
                return i;
           return -1;

   }

/* Bank: New Account Function */
void newAcct(); /* bank cpp */


/* Bank: Deposit Function */
void deposit(){

    int an;

        cout << "Enter your Account number." << endl;
        cin >> an;

/* Search For Account */
    int pos = find(an);

       if (pos < 0){

           cout << "Account not found." << endl;
           return;

       }

       if (acct[pos]->getStatus()== 0){

           cout << "Account was closed." << endl;
           return;

       }

       acct[pos]->deposit();

 }

/* Bank: Withdrawal Function */
void withdrawal(){

    int an;

       cout << "Enter your Account number." << endl;
       cin >> an;

/* Search For Account */
    int pos = find(an);

       if (pos < 0){

           cout << "Account not found." << endl;
           return;

       }

       if (acct[pos]->getStatus()== 0){

           cout << "Account was closed." << endl;
           return;

       }

       acct[pos]->withdrawal();

   }

/* Bank: Inquiry Funtion */
void inquiry(){

    int an;

       cout << "Enter your Account Number." << endl;
       cin >> an;

/* Search For Account */
    int pos = find(an);

       if (pos < 0){

           cout << "Account not found." << endl;
           return;

       }

       if (acct[pos]->getStatus()== 0){

           cout << "Account was closed." << endl;
           return;

       }

       acct[pos]->inquiry();

   }

/* Bank: Process Transactions Function */
void processTransactions(){

    char choice;
    menu();
    cin >> choice;

    while (choice != 'Q' && choice != 'q'){


        switch(choice){
            case 'W':
            case 'w':
                withdrawal();
                break;
            case 'D':
            case 'd':
                deposit();
                break;
            case 'B':
            case 'b':
                inquiry();
                break;
            case 'I':
            case 'i':
                printInfo();
                break;

            case 'H':
            case 'h':
               printAllAccts();
                break;

            case 'N':
            case 'n':
                newAcct();
                break;
            case 'C':
            case 'c':
                closeAcct();
                break;
            case 'R':
            case 'r':
                reopenAcct();
                break;
            case 'X':
            case 'x':
                deleteAcct();
                break;
            case 'Q':
            case 'q':
                printAllAccts();                                                                     //PRINT ACCOUNT ARRAY
                cout << "Thank You for using VR&Co Banking. Please come again!" << endl;
                break;
            default:
                cout << "That is not a valid selection. Please select another choice." << endl;
        }
            menu();
            cin >> choice;
       }
   }

/* Bank: Menu Function */
void menu(){

       /* menu print goes here */
    cout << "\t***************" << endl;
    cout << "\t   Bank Menu" << endl;
    cout << "\t W - Withdraw" << endl;
    cout << "\t D - Deposit"  << endl;
    cout << "\t I - Account Info (without transaction history)"  << endl;
    cout << "\t H - Account Info plus Account Transaction History"  << endl;
    cout << "\t N - New Account"  << endl;
    cout << "\t C - Close Account"  << endl;
    cout << "\t R - Reopen Account"  << endl;
    cout << "\t X - Delete Account"  << endl;
    cout << "\t B - Balance" << endl;
    cout << "\t Q - Quit" << endl;
    cout << "\t**************" << endl;
    cout << endl;

    cout<<"Enter choice now: " <<endl;

   }
/* Bank: Type Menu Function */
void typemenu(){

    cout << "\t***************" << endl;
    cout << "\t   Type Menu" << endl;
    cout << "\t 1 - Checking" << endl;
    cout << "\t 2 - Savings"  << endl;
    cout << "\t 3 - Money Market"  << endl;
    cout << "\t**************" << endl;
    cout << endl;

}

void  printInfo(){
int ans;
cout << "Here are your Account information Without the Transaction: " << endl;
cout << "Enter the account  number " << endl;

cin>>ans;

  int pos = find(ans);

       if (pos < 0){
           cout << "Account not found." << endl;
           return;
       }
   string kind[3] = {"Checking ", "Savings ", "Money Market "};
    cout<< "Account Number " << acct[pos]->getAcctnum() << endl;
         cout<< "SSN " << acct[pos]->getSsn() << endl;
         cout << "Type of account: " << kind[acct[pos]->getType()]<<endl;
            if (acct[pos]->getStatus()== 0)
                cout << "Account was closed." << endl;
            else
                acct[pos]->inquiry();
}
/* Bank: Print All Accounts Function */
void printAllAccts(){

      string kind[3] = {"Checking ", "Savings ", "Money Market "};

      cout << "Here is the information on all accounts:" << endl;

      for(int i = 0; i < numaccts; i++){
         cout<< "Account Number " << acct[i]->getAcctnum() << endl;
         cout<< "SSN " << acct[i]->getSsn() << endl;
         cout << "Type of account: " << kind[acct[i]->getType()]<<endl;

            if (acct[i]->getStatus()== 0)
                cout << "Account was closed." << endl;
            else
                acct[i]->inquiry();
      }
   }
   /* Close Account function */
void closeAcct(){

    int an;

       cout << "Enter your Account number." << endl;
       cin >> an;

/* Search For Account */
    int pos = find(an);

       if (pos < 0){

           cout<< "Account not found." << endl;
           return;
       }

       if (acct[pos]->getStatus()== 0){

           cout << "Account is already closed!" << endl;
           return;

       }

       acct[pos]->closeAcct();

   }

   /* Reopen Account function */
void reopenAcct(){

    int an;

       cout << "Enter your Account number." << endl;
       cin >> an;

/* Search For Account */
    int pos = find(an);

       if (pos < 0){

           cout<< "Account not found." << endl;
           return;
       }

       if (acct[pos]->getStatus()== 1){

           cout << "Account is already open!" << endl;
           return;

       }

       acct[pos]->reopen();

   }





/* Bank: Delete Account Function */
void deleteAcct(){

    int an;

       cout << "Enter your Account number." << endl;
       cin >> an;

/* Search For Account */
    int pos = find(an);

       if (pos < 0){

           cout<< "Account not found." << endl;
           return;
       }

       if (acct[pos]->getStatus()== 1){

           cout << "Account must be closed before deletion." << endl;
           return;

       }

       cout << "You have successfully deleted account." << acct[pos]->getAcctnum() << endl;

            delete acct[pos];
            numaccts--;

       for (int i = pos; i < numaccts; i++)
           acct[i] = acct[i+1];

   }

};

===============Depositor.h=================================================
#include "Name.h"
class Depositor
{

    private:

        Name myname;
        string ssn;

     public:
         void setName(string fname, string lname)
         {
            myname.setFirst(fname);
            myname.setLast(lname);
         }
         void setSsn(string s)
         {
            ssn=s;
         }
         string getName()
         {
             return myname.getFirst() + " " + myname.getLast();
         }
         string getSsn()
         {
            return ssn;
         }
};

================================Name.h====================================

//name 
class Name
{
private:
    string first;
    string last;
public:
    void setFirst(string f){first=f;}
    void setLast(string l){last=l;}
    string getLast(){return last;}
    string getFirst(){return first;}
};

===========================Transaction.h =======================================

//Transactions.h

#include<iostream>
#include<string.h>
    using namespace std;

class Transaction
{

    private:

        int ttype;
        double amt;

    public:

/* Mutator Function for Transaction Class */
void setTrans(int t, double a){

        ttype =t;
        amt = a;

    }

/* Print Transactions Corresponding to Transaction Type (ttype) */
void prt(){

        string message;

        if (ttype == 0)
           message = "Account Opened.";
        else

           if (ttype == 1)
               message = "Deposit.";
           else

               if (ttype == 2)
                   message = "Withdrawal.";
               else

                   if (ttype == 3)
                       message = "Account Closed.";
        cout << message << " " << amt << endl;

    }
};

=====================================================================================